/*
 * 02/28/2013
 *
 * RTokenMaker.java - Scanner for the R programming language.
 * 
 */
package org.knime.r;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the R programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated RTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Heiko Hofer
 * @version 0.1
 *
 */
%%

%public
%class RTokenMaker
%extends AbstractJFlexCTokenMaker
%unicode
%type org.fife.ui.rsyntaxtextarea.Token


%{


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public RTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
//		switch (initialTokenType) {
//			case Token.COMMENT_MULTILINE:
//				state = MLC;
//				start = text.offset;
//				break;
//			case Token.COMMENT_DOCUMENTATION:
//				state = DOCCOMMENT;
//				start = text.offset;
//				break;
//			default:
//				state = Token.NULL;
//		}

		s = text;
		yyreset(zzReader);
		yybegin(state);
		return yylex();
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill(){
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}


%}

/*
Macro Declarations

These declarations are regular expressions that will be used latter in the
Lexical Rules Section.
*/

/* A line terminator is a \r (carriage return), \n (line feed), or \r\n. */
EOL = (\r|\n|\r\n)*
//WHITE_SPACE= {EOL} | [ \t\f]
WHITE_SPACE= [ \t\f]
//SECTION_COMMENT = [#]{5,120}[\r\n]{1} [#]{2,5} [^\r\n]*
//COMMENT = "#"[^\r\n]*
LineCommentBegin			= "#"

/* A identifier integer is a word beginning a letter between A and Z, a and z,
or an underscore followed by zero or more letters between A and Z, a and z,
zero and nine, or an underscore. */
SYMBOL = [A-Za-z.][A-Za-z_0-9._]*


/* A literal integer is is a number beginning with a number between one and nine
followed by zero or more numbers between zero and nine or just a zero. */
IntLiteral = 0 | [1-9][0-9]*[L]?

Exponent = [eE] [+-]? [0-9]+
FLit1    = [0-9]+ \. [0-9]*
FLit2    = \. [0-9]+
FLit3    = [0-9]+
DoubleLiteral = ({FLit1}|{FLit2}|{FLit3}) {Exponent}?


//StringCharacter = [^\r\n]
// picked up from arc.flex :
EscapeSequence=\\[^\r\n]
//todo allow for linebreaks in strings and for single quot quoting
STRING_DQUOTE=\"([^\\\"]|{EscapeSequence})*(\"|\\)?
STRING_SQUOTE='([^\\\']|{EscapeSequence})*('|\\)?

//%state STRING

/* ------------------------Lexical Rules Section---------------------- */

/*
This section contains regular expressions and actions, i.e. Java code, that
will be executed when the scanner matches the associated regular expression. */

/* YYINITIAL is the state at which the lexer begins scanning.Â  So these regular
expressions will only be matched if the scanner is in the start state
YYINITIAL. */

%state EOL_COMMENT

%%

<YYINITIAL> {
  {WHITE_SPACE} {addToken(Token.WHITESPACE); }
  {EOL} {addNullToken(); return firstToken; }

  
  {LineCommentBegin}	{ start = zzMarkedPos-1; yybegin(EOL_COMMENT); }

  // r keywords
  "function" |
  "for" |
  "while" |
  "if" |
  "else" |
  "break" |
  "next" |
  "repeat" |
  "in" |
  "NULL" { addToken(Token.RESERVED_WORD); }
  "..." { addToken(Token.RESERVED_WORD_2); }

  {STRING_SQUOTE} | {STRING_DQUOTE} {addToken(Token.LITERAL_STRING_DOUBLE_QUOTE); }
 {SYMBOL} { addToken(Token.IDENTIFIER); }



  {IntLiteral} | {DoubleLiteral}  { addToken(Token.LITERAL_NUMBER_FLOAT); }
  "NULL" { addToken(Token.RESERVED_WORD); }

    // separators
  ";" |
  ":" |
  "," {addToken(Token.IDENTIFIER); }
  "(" |
  ")" |
  "{" |
  "}" |
  "[" |
  "]" |
  "[[" |
  "]]" {addToken(Token.SEPARATOR); }

  // operators
  "!" |
  "==" |
  ">" |
  "<" |
  ">=" |
  "<=" |
  "!=" |
  "&" |
  "&&" |
  "|" |
  "||" |
  "-" |
  "+" |
  "~" |
  "*" |
  "%" |
  "/" | 
  "^" | 
  "%%" | 
  "%/%" | "%*%" | "%o%" | "%x%" | %in% { addToken(Token.OPERATOR); }


    // misc
    "=" |
    "<-" |
    "->" { addToken(Token.OPERATOR); }

   "$"  |
   "@" |
    "?" |
    "::" |
    ":::" {addToken(Token.OPERATOR); }
    
	/* Ended with a line not in a string or comment. */
	<<EOF>>						{ addNullToken(); return firstToken; }
	
	/* Catch any other (unhandled) characters and flag them as identifiers. */
	.							{ addToken(Token.ERROR_IDENTIFIER); }


}

<EOL_COMMENT> {
	[^hwf\n]+				{}
	//{URL}					{ int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos; }
	[hwf]					{}
	\n						{ addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken; }
	<<EOF>>					{ addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken; }

}


